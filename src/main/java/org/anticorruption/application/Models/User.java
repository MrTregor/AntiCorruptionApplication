package org.anticorruption.application.Models;

import lombok.Getter;
import lombok.Setter;

import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Модель пользователя в антикоррупционной информационной системе.
 * Представляет полную информацию о сотруднике, включая персональные,
 * профессиональные и служебные данные.
 *
 * @author Гордейчик Е.А.
 * @version 1.0
 * @since 10.10.2024
 */
@Getter
@Setter
public class User {
    /**
     * Уникальный идентификатор пользователя в базе данных.
     * Используется для однозначной идентификации сотрудника в системе.
     */
    private Long id;

    /**
     * Логин пользователя для входа в систему.
     * Должен быть уникальным и соответствовать корпоративным политикам безопасности.
     */
    private String username;

    /**
     * Хэшированный пароль пользователя.
     * Хранится в зашифрованном виде для обеспечения информационной безопасности.
     */
    private String password;

    /**
     * Группы доступа, к которым принадлежит пользователь.
     * Определяет роли и права сотрудника в информационной системе.
     */
    private Set<AccessGroup> groups = new HashSet<>();

    /**
     * Табельный номер сотрудника.
     * Уникальный идентификационный номер в рамках организации.
     */
    private String employeeId;

    /**
     * Фамилия сотрудника.
     * Используется для формирования полного имени и официальных документов.
     */
    private String lastName;

    /**
     * Имя сотрудника.
     * Официальное имя для служебных и личных документов.
     */
    private String firstName;

    /**
     * Отчество сотрудника.
     * Используется в официальной документации и коммуникациях.
     */
    private String middleName;

    /**
     * Полное имя сотрудника.
     * Формируется автоматически из фамилии, имени и отчества.
     */
    private String fullName;

    /**
     * Дата рождения сотрудника.
     * Используется для кадрового учета и идентификации личности.
     */
    private Date dateOfBirth;

    /**
     * Пол сотрудника.
     * Указывается для кадрового и статистического учета.
     */
    private String gender;

    /**
     * Фотография сотрудника.
     * Хранится в виде массива байтов для идентификации и документации.
     */
    private byte[] photo;

    /**
     * Серия паспорта.
     * Часть паспортных данных для официальной идентификации.
     */
    private String passportSeries;

    /**
     * Номер паспорта.
     * Уникальный идентификатор документа, удостоверяющего личность.
     */
    private String passportNumber;

    /**
     * Адрес проживания сотрудника.
     * Используется для служебных и личных коммуникаций.
     */
    private String address;

    /**
     * Контактный телефонный номер.
     * Используется для оперативной связи с сотрудником.
     */
    private String phoneNumber;

    /**
     * Электронная почта сотрудника.
     * Официальный канал электронной коммуникации.
     */
    private String email;

    /**
     * Должность сотрудника в организации.
     * Определяет служебное положение и функциональные обязанности.
     */
    private String position;

    /**
     * Отдел или подразделение организации.
     * Указывает на структурную принадлежность сотрудника.
     */
    private String department;

    /**
     * Дата приема на работу.
     * Фиксирует начало трудовых отношений с организацией.
     */
    private Date hireDate;

    /**
     * Тип трудового договора.
     * Определяет характер трудовых отношений (постоянный, срочный и т.д.).
     */
    private String contractType;

    /**
     * Размер заработной платы.
     * Конфиденциальная информация о денежном вознаграждении.
     */
    private Double salary;

    /**
     * Информация об образовании.
     * Включает уровень, учебное заведение и специальность.
     */
    private String education;

    /**
     * Трудовой стаж и опыт работы.
     * Описание профессиональной истории сотрудника.
     */
    private String workExperience;

    /**
     * Профессиональные навыки и квалификации.
     * Перечень компетенций сотрудника.
     */
    private String skills;

    /**
     * Семейное положение сотрудника.
     * Используется для кадрового и социального учета.
     */
    private String maritalStatus;

    /**
     * Количество детей.
     * Используется для социальных гарантий и статистики.
     */
    private Integer numberOfChildren;

    /**
     * Информация о воинском учете.
     * Данные о военной службе или отношении к воинской обязанности.
     */
    private String militaryServiceInfo;

    /**
     * ИНН (Идентификационный налоговый номер).
     * Уникальный налоговый идентификатор.
     */
    private String inn;

    /**
     * СНИЛС (Страховой номер индивидуального лицевого счета).
     * Идентификатор в системе пенсионного страхования.
     */
    private String snils;

    /**
     * Сведения о повышении квалификации.
     * История профессионального развития сотрудника.
     */
    private String qualificationUpgrade;

    /**
     * Награды и поощрения.
     * Профессиональные достижения сотрудника.
     */
    private String awards;

    /**
     * Дисциплинарные взыскания.
     * История нарушений трудовой дисциплины.
     */
    private String disciplinaryActions;

    /**
     * Результаты аттестаций.
     * Оценка профессиональной деятельности.
     */
    private String attestationResults;

    /**
     * Результаты медицинских осмотров.
     * Информация о состоянии здоровья.
     */
    private String medicalExamResults;

    /**
     * Банковские реквизиты.
     * Конфиденциальная финансовая информация.
     */
    private String bankDetails;

    /**
     * Контакты для экстренной связи.
     * Информация о ближайших родственниках.
     */
    private String emergencyContact;

    /**
     * Дополнительные примечания.
     * Служебные заметки о сотруднике.
     */
    private String notes;

    /**
     * Признак увольнения сотрудника.
     * Указывает, был ли сотрудник уволен из организации.
     *
     * @return true, если сотрудник уволен, иначе false
     */
    private Boolean isFired;

    /**
     * Возвращает полное имя сотрудника в формате "Фамилия Имя Отчество".
     *
     * @return Полное имя сотрудника
     */
    public String getFullName() {
        return lastName + " " + firstName + " " + middleName;
    }

    /**
     * Возвращает количество детей.
     * Если значение не установлено, возвращает 0.
     *
     * @return Количество детей
     */
    public Integer getNumberOfChildren() {
        return Objects.requireNonNullElse(numberOfChildren, 0);
    }

    /**
     * Преобразует объект пользователя в строковое представление.
     * По умолчанию возвращает полное имя.
     *
     * @return Полное имя пользователя
     */
    @Override
    public String toString() {
        return this.getFullName();
    }

    /**
     * Проверяет, является ли пользователь уволенным.
     *
     * @return true, если пользователь уволен, иначе false
     */
    public boolean isFired() {
        return Boolean.TRUE.equals(isFired);
    }

    /**
     * Проверяет наличие доступа к определенной группе.
     *
     * @param groupName Название группы доступа
     * @return true, если пользователь состоит в указанной группе
     */
    public boolean hasAccessGroup(String groupName) {
        return groups.stream()
                .anyMatch(group -> group.getName().equals(groupName));
    }

    // Рекомендуется добавить методы для валидации данных
    // Например, метод для проверки корректности email
    /**
     * Проверяет, является ли электронная почта корректной.
     *
     * @return true, если email корректен, иначе false
     */
    public boolean isEmailValid() {
        return email != null && email.matches("^[A-Za-z0-9+_.-]+@(.+)$");
    }

    // Методы для безопасной работы с чувствительными данными
    /**
     * Маскирует пароль для безопасного отображения.
     *
     * @return Маскированный пароль
     */
    public String maskPassword() {
        return password.replaceAll(".", "*");
    }

    // Методы аудита изменений пользовательских данных
    /**
     * Логирует изменения данных пользователя.
     *
     * @param fieldName Название изменяемого поля
     * @param oldValue  Старое значение
     * @param newValue  Новое значение
     */
    public void logChange(String fieldName, String oldValue, String newValue) {
        // Реализация логирования изменений
        System.out.printf("Изменение поля '%s': '%s' -> '%s'%n", fieldName, oldValue, newValue);
    }
}